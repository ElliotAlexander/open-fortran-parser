      
%%%%%%%%%%
%%Fortran ISO/IEC 1539:1991 section R5xx Data Object declarations and Specifications
%%%%%%%%%%

%%module languages/fortran/syntax/R500DataDeclarations
module R500DataDeclarations

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/R400DataTypes
  %% languages/fortran/syntax/R700Expressions

  FortranLex
  R400DataTypes
  R700Expressions

exports

sorts
%%TODO   AccessId AccessIdList AccessSpec AccessStmt AllocatableStmt
%%TODO   ArrayAllocation ArrayAllocationList ArrayDeclarator ArrayDeclaratorList ArraySpec
%%TODO   AssumedShapeSpec AssumedShapeSpecList AssumedSizeSpec AttrSpec CharLength
  CharSelector %%TODO Comblock CommonBlockObject CommonBlockObjectList
  CommonStmt %%TODO Constant DataIDoObject DataIDoObjectList DataImpliedDo
%%TODO   Datalist DataStmt DataStmtObject DataStmtObjectList DataStmtSet
%%TODO   DataStmtValue DataStmtValueList DeferredShapeSpec DeferredShapeSpecList DimensionStmt
%%TODO   EntityDecl EquivalenceObject EquivalenceSet EquivalenceSetList EquivalenceStmt
  ExplicitShapeSpec ExplicitShapeSpecList ImplicitSpec ImplicitStmt %%TODO IntentPar
%%TODO   IntentParList IntentSpec IntentStmt KindSelector LengthSelector
  LetterSpec LowerBound NamedConstant %%TODO NamedConstantDef NamedConstantDefList
%%TODO   NamedConstantUse NamelistGroup NamelistGroupObject NamelistStmt
%%TODO   OptionalPar OptionalParList OptionalStmt ParameterStmt PointerStmt
%%TODO   PointerStmtObject PointerStmtObjectList SavedEntity SavedEntityList SaveStmt
%%TODO   TargetObject TargetObjectList TargetStmt TypeDeclarationStmt TypeParamValue
  TypeSpec UpperBound   

%%TODO - replace with above
  AccessSpec ArraySpec AssumedSizeSpec 
  AttrSpec IntentSpec
  CharLength
  CommonBlockObjectList  Comblock CommonBlockObject Comlist SpecificationStmt
  EntityDecl
  KindSelector
  LengthSelector
  NamedConstantUse
  TypeDeclarationStmt TypeParamValue
  LanguageBindingSpec

context-free syntax

%%R307
  Ident                         -> NamedConstant
  Ident                         -> NamedConstantUse

%%R501
  LblDef TypeSpec (',' AttrSpec)* '::' {EntityDecl ","}+  EOS -> TypeDeclarationStmt  {cons("type-declaration-stmt")}
  LblDef TypeSpec                      {EntityDecl ","}+  EOS -> TypeDeclarationStmt  {cons("type-declaration-stmt")}

%%R404
%%TODO-F08 move to R404 and add intrinsic-type-spec
  'INTEGER'   KindSelector?      -> TypeSpec
  'REAL'      KindSelector?      -> TypeSpec
  'COMPLEX'   KindSelector?      -> TypeSpec
  'CHARACTER' CharSelector?      -> TypeSpec
  'LOGICAL'   KindSelector?      -> TypeSpec

  'DOUBLE' 'PRECISION'           -> TypeSpec
  'DOUBLE' 'COMPLEX'             -> TypeSpec

%%R403
%%TODO-F08 declaration-type-spec
  'TYPE' '(' TypeName ')'        -> TypeSpec
  'TYPE' '(' '*' ')'             -> TypeSpec

%%R502
   AccessSpec                    -> AttrSpec
  'ALLOCATABLE'                  -> AttrSpec
  'ASYNCHRONOUS'                 -> AttrSpec
  'CONTIGUOUS'                   -> AttrSpec
%%TODO-F08  DimensionSpec                  -> AttrSpec
  'DIMENSION' '(' ArraySpec ')'  -> AttrSpec
  'EXTERNAL'                     -> AttrSpec
  'INTENT' '(' IntentSpec ')'    -> AttrSpec
  'INTRINSIC'                    -> AttrSpec
   LanguageBindingSpec           -> AttrSpec
  'OPTIONAL'                     -> AttrSpec
  'PARAMETER'                    -> AttrSpec
  'POINTER'                      -> AttrSpec
  'PROTECTED'                    -> AttrSpec
  'SAVE'                         -> AttrSpec
  'TARGET'                       -> AttrSpec
  'VALUE'                        -> AttrSpec
  'VOLATILE'                     -> AttrSpec

%%R503
  ObjectName '=' Expr                                   -> EntityDecl
%%TODO   ObjectName '(' ArraySpec ')' '=' Expr                 -> EntityDecl
%%TODO   ObjectName '*' CharLength '=' Expr                    -> EntityDecl
%%TODO   ObjectName '*' CharLength '(' ArraySpec ')' '=' Expr  -> EntityDecl
%%F77
  ObjectName                                            -> EntityDecl
%%TODO   ObjectName '*' CharLength                             -> EntityDecl
  ObjectName '(' ArraySpec ')'                          -> EntityDecl
%%TODO   ObjectName '(' ArraySpec ')' '*' CharLength           -> EntityDecl


%%R505
%% expr used as scalar-int-initialization-expr 
  '(' ('KIND' '=')? Expr ')'                            -> KindSelector
%%TODO: remove this often used in complex declarations like Integer*8 Complex*8 Complex*16 (IBM standard, not ISO!?)
  '*' Icon                                              -> KindSelector

%%R425
%%TODO - move to R400...
  LengthSelector                                        -> CharSelector
  '(' 'LEN' '=' TypeParamValue ',' 'KIND' '=' Expr ')'  -> CharSelector
  '('           TypeParamValue ',' 'KIND' '=' Expr ')'  -> CharSelector
  '('           TypeParamValue ','            Expr ')'  -> CharSelector

  '(' 'KIND' '=' Expr ',' 'LEN' '=' TypeParamValue ')'  -> CharSelector
  '(' 'KIND' '=' Expr                              ')'  -> CharSelector

%%R426
  '(' ('LEN' '=')? TypeParamValue ')'                   -> LengthSelector
  '*' CharLength ','?                                   -> LengthSelector

%%R427
  '(' TypeParamValue ')'                                -> CharLength
  Icon                                                  -> CharLength

%%R508
  'BIND' '(' 'C' (',' 'NAME' '=' Scon)? ')'  -> LanguageBindingSpec

%%R508
%%TODO   '(' TypeParamValue ')'        -> CharLength
%%TODO   ScalarIntLiteralConstant      -> CharLength

%%R401
  SpecificationExpr                    -> TypeParamValue
  '*'                                  -> TypeParamValue
  ':'                                  -> TypeParamValue

%%R507
  'PUBLIC'                             -> AccessSpec
  'PRIVATE'                            -> AccessSpec

%%R510
%%TODO-F08 - fix assumed-rank-spec
  '..'                                                 -> ArraySpec
%%TODO   AssumedShapeSpecList                          -> ArraySpec
%%TODO   DeferredShapeSpecList                         -> ArraySpec
  ExplicitShapeSpecList                                -> ArraySpec
  AssumedSizeSpec                                      -> ArraySpec

%%R511
%%TODO-F08 co-array-spec

%%R523
  'IN'                 -> IntentSpec
  'OUT'                -> IntentSpec
  'INOUT'              -> IntentSpec

%%R512
  {ExplicitShapeSpec ","}+                             -> ExplicitShapeSpecList
  (LowerBound ':')? UpperBound                         -> ExplicitShapeSpec

%%R513
  SpecificationExpr                             -> LowerBound

%%R514
  SpecificationExpr                             -> UpperBound

%%R516
%%TODO   LowerBound? ':'                                      -> AssumedShapeSpec
%%TODO   LowerBound ':'                                       -> AssumedShapeSpecList
%%TODO   DeferredShapeSpecList ',' LowerBound ':'      -> AssumedShapeSpecList
%%TODO   AssumedShapeSpecList ',' AssumedShapeSpec     -> AssumedShapeSpecList

%%R517
%%TODO   {DeferredShapeSpec ","}+                      -> DeferredShapeSpecList
%%TODO   ':'                                           -> DeferredShapeSpec

%%R518
  (LowerBound ':')? '*'                                -> AssumedSizeSpec
  ExplicitShapeSpecList ',' '*'                        -> AssumedSizeSpec
%%TODO   ExplicitShapeSpecList ',' LowerBound ':' '*'          -> AssumedSizeSpec

%%R519
%%TODO   LblDef 'intent' '(' IntentSpec ')' ':' ':' IntentParList EOS  -> IntentStmt
%%TODO   LblDef 'intent' '(' IntentSpec ')' IntentParList EOS          -> IntentStmt
%%TODO   {IntentPar ","}+                                              -> IntentParList
%%TODO   DummyArgName                                                  -> IntentPar

%%R520
%%TODO   LblDef 'optional' ':' ':' OptionalParList EOS         -> OptionalStmt
%%TODO   LblDef 'optional' OptionalParList EOS                 -> OptionalStmt
%%TODO   {OptionalPar ","}+                                    -> OptionalParList
%%TODO   DummyArgName                                          -> OptionalPar

%%R521
%%TODO   LblDef AccessSpec ':' ':' AccessIdList EOS            -> AccessStmt
%%TODO   LblDef AccessSpec AccessIdList? EOS                   -> AccessStmt

%%R522
%%TODO   {AccessId ","}+               -> AccessIdList
%%TODO   GenericName                   -> AccessId
%%TODO   GenericSpec                   -> AccessId

%%R523 see 26
%%TODO   LblDef 'save' ':' ':' SavedEntityList EOS             -> SaveStmt
%%TODO   LblDef 'save' SavedEntityList? EOS                    -> SaveStmt

%%R524
%%TODO   {SavedEntity ","}+            -> SavedEntityList
%%TODO   VariableName                  -> SavedEntity
%%TODO   '/' CommonBlockName '/'       -> SavedEntity

%%R525
%%TODO   LblDef 'dimension' ':' ':' ArrayDeclaratorList EOS    -> DimensionStmt
%%TODO   LblDef 'dimension' ArrayDeclaratorList EOS            -> DimensionStmt

%%TODO   {ArrayDeclarator ","}+                                -> ArrayDeclaratorList
%%TODO   VariableName '(' ArraySpec ')'                        -> ArrayDeclarator

%%R526
%%TODO   LblDef 'allocatable' ':' ':' ArrayAllocationList EOS  -> AllocatableStmt
%%TODO   LblDef 'allocatable' ArrayAllocationList EOS          -> AllocatableStmt
%%TODO   {ArrayAllocation ","}+                                -> ArrayAllocationList
%%TODO   ArrayName ( '(' DeferredShapeSpecList ')' )?          -> ArrayAllocation

%%R527
%%TODO   LblDef 'pointer' ':' ':' PointerStmtObjectList EOS    -> PointerStmt
%%TODO   LblDef 'pointer' PointerStmtObjectList EOS            -> PointerStmt
%%TODO   {PointerStmtObject ","}+                              -> PointerStmtObjectList
%%TODO   ObjectName                                            -> PointerStmtObject
%%TODO   ObjectName '(' DeferredShapeSpecList ')'              -> PointerStmtObject

%%R528
%%TODO   LblDef 'target' ':' ':' TargetObjectList EOS          -> TargetStmt
%%TODO   LblDef 'target' TargetObjectList EOS                  -> TargetStmt
%%TODO   {TargetObject ","}+                                   -> TargetObjectList
%%TODO   ObjectName                                            -> TargetObject
%%TODO   ObjectName '(' ArraySpec ')'                          -> TargetObject

%%R529
%%TODO   LblDef 'data' Datalist EOS                            -> DataStmt
%%TODO   {DataStmtSet ","}+                                    -> Datalist

%%R530
%%TODO   DataStmtObjectList '/' DataStmtValueList '/'          -> DataStmtSet

%%R531
%%TODO   {DataStmtObject ","}+                                 -> DataStmtObjectList
%%TODO   Variable                                              -> DataStmtObject
%%TODO   DataImpliedDo                                         -> DataStmtObject

%%R532
%%TODO   {DataStmtValue ","}+                                          -> DataStmtValueList
%%TODO   Constant                                                      -> DataStmtValue
%%TODO  @<Scalar Integer Literal Constant@> '*' Constant        -> DataStmtValue
%%TODO   NamedConstantUse '*' Constant                                 -> DataStmtValue

%%R533 see 100
%%TODO   StructureConstructor                  -> Constant
%%TODO   BozLiteralConstant                    -> Constant

%%R535
%%TODO   '(' DataIDoObjectList ',' ImpliedDoVariable '=' Expr ',' Expr (',' Expr)? ')' -> DataImpliedDo

%%R536
%%TODO   {DataIDoObject ","}+                  -> DataIDoObjectList
%%TODO   ArrayElement                          -> DataIDoObject
%%TODO   DataImpliedDo                         -> DataIDoObject
%%TODO   StructureComponent                    -> DataIDoObject

%%R538
%%TODO   LblDef 'parameter' '(' NamedConstantDefList ')' EOS  -> ParameterStmt

%%R539
%% original iso: named-constant-def is named-constant = initialization-expr
%%TODO   {NamedConstantDef ","}+                       -> NamedConstantDefList
%%TODO   NamedConstant '=' Expr                        -> NamedConstantDef

%%R559
  LblDef 'IMPLICIT' 'NONE'                         EOS -> ImplicitStmt    {cons("implicit-stmt")}
  LblDef 'IMPLICIT' {ImplicitSpec ","}+            EOS -> ImplicitStmt    {cons("implicit-stmt")}

%%560
  TypeSpec "(" {LetterSpec ","}+ ")"                   -> ImplicitSpec

%%561
  Letter ( "-" Letter )?                               -> LetterSpec

%%R543
%% todo: Use SDF notation.
%%  LblDef 'namelist' NamelistGroups  EOS                               -> NamelistStmt
%%                      '/' NamelistGroupName '/' NamelistGroupObject   -> NamelistGroups
%%  NamelistGroups ','? '/' NamelistGroupName '/' NamelistGroupObject   -> NamelistGroups
%%  NamelistGroups ',' NamelistGroupObject                              -> NamelistGroups
%%TODO   LblDef 'namelist' NamelistGroup ( ','? NamelistGroup)*  EOS           -> NamelistStmt
%%TODO   '/' NamelistGroupName '/' {NamelistGroupObject ","}+                  -> NamelistGroup

%%R544
%%TODO   VariableName                                                  -> NamelistGroupObject

%%R545
%%TODO   LblDef 'equivalence' EquivalenceSetList EOS                   -> EquivalenceStmt

%%R546
%%TODO   {EquivalenceSet ","}+                                         -> EquivalenceSetList
%%TODO   '(' EquivalenceObject "," {EquivalenceObject ","}+ ')'        -> EquivalenceSet

%%R547 Note: Variable includes Substring variables %% TODO: check EqObject def substring,arrayname?
%%TODO   ArrayName                                     -> EquivalenceObject
%%TODO   Variable                                      -> EquivalenceObject

%%R567
  LblDef 'COMMON' Comlist                    EOS -> CommonStmt     {cons("common-stmt")}
  CommonBlockObject                              -> Comlist
  Comblock CommonBlockObject                     -> Comlist
  Comlist ',' CommonBlockObject                  -> Comlist
  Comlist Comblock CommonBlockObject             -> Comlist
  Comlist ',' Comblock CommonBlockObject         -> Comlist
  '/' '/'                                        -> Comblock
  '/' CommonBlockName '/'                        -> Comblock
  LblDef 'common' Comblock? CommonBlockObjectList (','? Comblock CommonBlockObjectList)* EOS    -> CommonStmt
   '/' CommonBlockName? '/'                      -> Comblock

%%R568
%%todo: check if this can be reverted to 
%%      original iso def: CommonBlockObject is VariableName [(ExplicitShapeSpecList)]
  VariableName                                  -> CommonBlockObject
%%TODO   ArrayDeclarator                        -> CommonBlockObject
  {CommonBlockObject ","}+                      -> CommonBlockObjectList
