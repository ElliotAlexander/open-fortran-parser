
%%%%%%%%%%
%% This Fortran grammar is structured according to document ISO/IEC 1539:1991. 
%% Rulenumbers are named R2xx - R12xx as in Annex D of 1539:1991
%% The grammar is adapted from an ELI project grammer, http://eli-project.cvs.sourceforge.net/eli-project
%%
%%%%%%%%%%
%% ISO/IEC 1539:1991 section R2xx Fortran terms and concepts
%%%%%%%%%%

%%module languages/fortran/syntax/Fortran90
module R1100ProgramUnits

%%imports languages/fortran/syntax/FortranLex
%%imports languages/fortran/syntax/R400DataTypes
%%imports languages/fortran/syntax/R500DataDeclarations
%%imports languages/fortran/syntax/R600UseDataObjects
%%imports languages/fortran/syntax/R700Expressions
%%imports languages/fortran/syntax/R800ExecutionControl
%%imports languages/fortran/syntax/R900IOStatements
%%imports languages/fortran/syntax/R1000_IOEditing
%%imports languages/fortran/syntax/R1100ProgramUnits
%%imports languages/fortran/syntax/R1200Procedures

imports FortranLex
%%TODO imports R400DataTypes
imports R500DataDeclarations
%%TODO imports R600UseDataObjects
%%TODO imports R700Expressions
imports R800ExecutionControl
%%TODO imports R900IOStatements
%%TODO imports R1000_IOEditing
%%TODO imports R1100ProgramUnits
imports R1200Procedures

exports

sorts
  ActionStmt ArrayName Body
  BodyConstruct CommonBlockName ComponentName DeclarationConstruct %%TODO DefinedOperator
%%TODO   DummyArgName EndName EntryName ExecutableConstruct ExecutableProgram
  ExecutionPartConstruct %%TODO ExternalName FunctionName GenericName ImpliedDoVariable
  InternalSubProgPart InternalSubprogram %%TODO IntrinsicProcedureName  MainProgram
  MainRange ModuleSubprogram ModuleSubprogramPartConstruct %%TODO Name
%%TODO   NamelistGroupName ObjectName ProgramName ProgramUnit SFDummyArgName
  SpecificationPartConstruct %%TODO SpecificationStmt SubroutineName SubroutineNameUse TypeName
%%TODO   VariableName   

%%TODO - replace with above
  DefinedOperator
  ExecutableConstruct
  UseStmt UseName Only OnlyList Rename RenameList
  BlockDataSubprogram BlockDataStmt EndBlockDataStmt BlockDataBodyConstruct BlockDataName BlockDataBody
  
  Program                             %%R201   (originally ExecutableProgram F90)
  ProgramUnit                         %%R202

  MainProgram                         %%R1101
  ProgramStmt                         %%R1102
  EndProgramStmt                      %%R1103

  Module                              %%R1104
  ModuleStmt                          %%R1105
  EndModuleStmt                       %%R1105
  ModuleBody

context-free start-symbols 
  Program

context-free syntax

%%R201 JD: the optional startcommentblock is needed to parse comment lines in 1st lines of a file.
%% original: ExecutableProgram ProgramUnit -> ExecutableProgram

 StartCommentBlock? ProgramUnit+               -> Program          {cons("program")}

%%R202
  MainProgram                                  -> ProgramUnit
  FunctionSubprogram                           -> ProgramUnit
%%TODO   SubroutineSubprogram                  -> ProgramUnit
  Module                                       -> ProgramUnit
  BlockDataSubprogram                          -> ProgramUnit


%%R1101
  ProgramStmt? MainRange                       -> MainProgram      {cons("main-program")}
  BodyConstruct+       EndProgramStmt          -> MainRange
  InternalSubProgPart  EndProgramStmt          -> MainRange
  EndProgramStmt                               -> MainRange

  SpecificationPartConstruct                   -> BodyConstruct
  ExecutableConstruct                          -> BodyConstruct
  BodyConstruct+                               -> Body

%%R1102
  LblDef "PROGRAM"       ProgramName       EOS -> ProgramStmt      {cons("program-stmt")}

%%R1103
  LblDef "END"                             EOS -> EndProgramStmt   {cons("end-program-stmt")}
  LblDef "END" "PROGRAM" ProgramName?      EOS -> EndProgramStmt   {cons("end-program-stmt")}

%%R1104
  ModuleStmt ModuleBody EndModuleStmt          -> Module           {cons("module")}
  ModuleStmt            EndModuleStmt          -> Module           {cons("module")}

%%R1105
  LblDef "MODULE" ModuleName               EOS -> ModuleStmt        {cons("module-stmt")}

%%R1106
  LblDef "END"                             EOS -> EndModuleStmt     {cons("end-module-stmt")}
  LblDef "END" "MODULE" ModuleName?        EOS -> EndModuleStmt     {cons("end-module-stmt")}

  SpecificationPartConstruct                   -> ModuleBody
  ModuleSubprogramPartConstruct                -> ModuleBody
  ModuleBody SpecificationPartConstruct        -> ModuleBody
  ModuleBody ModuleSubprogramPartConstruct     -> ModuleBody

%%R1108
  ContainsStmt                                 -> ModuleSubprogramPartConstruct
  ModuleSubprogram                             -> ModuleSubprogramPartConstruct

%%R1108
  FunctionSubprogram                           -> ModuleSubprogram
  SubroutineSubprogram                         -> ModuleSubprogram

%%R1109
%%TODO-F08 - add module-nature
  LblDef "USE" Name ("," RenameList)?      EOS -> UseStmt           {cons("use-stmt")}
  LblDef "USE" Name "," "ONLY"
                    ":"  OnlyList?         EOS -> UseStmt           {cons("use-stmt")}

%%1111
%%TODO-F08 - add OPERATORs
  Ident "=>" UseName                           -> Rename
  Rename ("," Rename)*                         -> RenameList

  Ident                                        -> UseName

%%R1112
%%TODO-F08 - add rename and only-use-name
  GenericSpec                                  -> Only
  (Ident "=>")? UseName                        -> Only

  Only ("," Only)*                             -> OnlyList


%%R1120
  BlockDataStmt BlockDataBody EndBlockDataStmt   -> BlockDataSubprogram
  BlockDataStmt EndBlockDataStmt                 -> BlockDataSubprogram

%%R1121
  LblDef "BLOCK" "DATA" BlockDataName?       EOS -> BlockDataStmt     {cons("block-data-stmt")}

%%R1122
  LblDef "END" "BLOCK" "DATA" BlockDataName? EOS -> EndBlockDataStmt  {cons("end-block-data-stmt")}
  LblDef "END"                               EOS -> EndBlockDataStmt  {cons("end-block-data-stmt")}

  Ident -> BlockDataName

  BlockDataBodyConstruct+ -> BlockDataBody

  SpecificationPartConstruct -> BlockDataBodyConstruct


%%R204
%%TODO   ImplicitStmt                          -> SpecificationPartConstruct
%%TODO   ParameterStmt                         -> SpecificationPartConstruct
%%TODO   FormatStmt                            -> SpecificationPartConstruct
%%TODO   EntryStmt                             -> SpecificationPartConstruct
  DeclarationConstruct                         -> SpecificationPartConstruct
  UseStmt                                      -> SpecificationPartConstruct

%%R207
  TypeDeclarationStmt                          -> DeclarationConstruct
%%TODO   SpecificationStmt                     -> DeclarationConstruct
%%TODO   DerivedTypeDef                        -> DeclarationConstruct
%%TODO   InterfaceBlock                        -> DeclarationConstruct

%%R209
  ExecutableConstruct                          -> ExecutionPartConstruct
%%TODO   FormatStmt                            -> ExecutionPartConstruct
%%TODO   DataStmt                              -> ExecutionPartConstruct
%%TODO   EntryStmt                             -> ExecutionPartConstruct

%%R214                     
%%TODO   AccessStmt                            -> SpecificationStmt
%%TODO   AllocatableStmt                       -> SpecificationStmt
%%TODO   CommonStmt                            -> SpecificationStmt
%%TODO   DataStmt                              -> SpecificationStmt
%%TODO   DimensionStmt                         -> SpecificationStmt
%%TODO   EquivalenceStmt                       -> SpecificationStmt
%%TODO   ExternalStmt                          -> SpecificationStmt
%%TODO   IntrinsicStmt                         -> SpecificationStmt
%%TODO   SaveStmt                              -> SpecificationStmt
%%TODO   IntentStmt                            -> SpecificationStmt
%%TODO   NamelistStmt                          -> SpecificationStmt
%%TODO   OptionalStmt                          -> SpecificationStmt
%%TODO   PointerStmt                           -> SpecificationStmt
%%TODO   TargetStmt                            -> SpecificationStmt

%%R210
  Body ContainsStmt   InternalSubprogram       -> InternalSubProgPart
  ContainsStmt        InternalSubprogram       -> InternalSubProgPart
  InternalSubProgPart InternalSubprogram       -> InternalSubProgPart

%%R211
  FunctionSubprogram                   -> InternalSubprogram
  SubroutineSubprogram                 -> InternalSubprogram

%%R212
  ContainsStmt                         -> ModuleSubprogramPartConstruct
  ModuleSubprogram                     -> ModuleSubprogramPartConstruct

%%R213
  FunctionSubprogram                   -> ModuleSubprogram
  SubroutineSubprogram                 -> ModuleSubprogram

%%R215
  ActionStmt                    -> ExecutableConstruct
%%TODO   DoConstruct                   -> ExecutableConstruct
%%TODO   IfConstruct                   -> ExecutableConstruct
%%TODO   CaseConstruct                 -> ExecutableConstruct
%%TODO   WhereConstruct                -> ExecutableConstruct
%%TODO   EndDoStmt                     -> ExecutableConstruct

%%R216
%%TODO   AllocateStmt                  -> ActionStmt
%%TODO   CycleStmt                     -> ActionStmt
%%TODO   DeallocateStmt                -> ActionStmt
%%TODO   ExitStmt                      -> ActionStmt
%%TODO   NullifyStmt                   -> ActionStmt
%%TODO   PointerAssignmentStmt         -> ActionStmt
%%TODO   WhereStmt                     -> ActionStmt
%%TODO   ArithmeticIfStmt              -> ActionStmt
  AssignmentStmt                -> ActionStmt
%%TODO   AssignStmt                    -> ActionStmt
%%TODO   BackspaceStmt                 -> ActionStmt
%%TODO   CallStmt                      -> ActionStmt
%%TODO   CloseStmt                     -> ActionStmt
%%TODO   ContinueStmt                  -> ActionStmt
%%TODO   EndfileStmt                   -> ActionStmt
%%TODO   GotoStmt                      -> ActionStmt
%%TODO   ComputedGotoStmt              -> ActionStmt
%%TODO   AssignedGotoStmt              -> ActionStmt
%%TODO   IfStmt                        -> ActionStmt
%%TODO   InquireStmt                   -> ActionStmt
%%TODO   OpenStmt                      -> ActionStmt
%%TODO   PauseStmt                     -> ActionStmt
%%TODO   PrintStmt                     -> ActionStmt
%%TODO   ReadStmt                      -> ActionStmt
%%TODO   ReturnStmt                    -> ActionStmt
%%TODO   RewindStmt                    -> ActionStmt
%%  StmtFunctionStmt            -> ActionStmt see R1226 comment
%%TODO   StopStmt                      -> ActionStmt
%%TODO   WriteStmt                     -> ActionStmt


%%R311
%%TODO   Dop                   -> DefinedOperator
%%TODO   PowerOp               -> DefinedOperator
%%TODO   MultOp                -> DefinedOperator
  AddOp                 -> DefinedOperator
%%TODO   ConcatOp              -> DefinedOperator
%%TODO   RelOp                 -> DefinedOperator
%%TODO   NotOp                 -> DefinedOperator
%%TODO   AndOp                 -> DefinedOperator
%%TODO   OrOp                  -> DefinedOperator
%%TODO   EquivOp               -> DefinedOperator
