      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section 12xx Procedures section
%%%%%%%%%%

%%module languages/fortran/syntax/R1200Procedures
module R1200Procedures

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/Fortran90
  FortranLex
  Fortran

exports

sorts

%%TODO   ActualArg CallStmt ContainsStmt EndFunctionStmt EndInterfaceStmt
%%TODO   EndSubroutineStmt EntryStmt ExternalStmt FunctionArg FunctionArgList
%%TODO   FunctionInterfaceRange FunctionPar FunctionParList FunctionPrefix FunctionRange
%%TODO   FunctionReference FunctionStmt FunctionSubprogram GenericSpec InterfaceBlock
%%TODO   InterfaceBlockPart InterfaceBody InterfaceStmt IntrinsicStmt ModuleProcedureStmt
%%TODO   ProcedureName ProcedureNameList ReturnStmt SFDummyArgNameList 
  %% StmtFunctionStmt obsolescant/deleted
%%TODO   SubprogramInterfaceBody SubroutineInterfaceRange SubroutinePar SubroutineParList SubroutineRange
%%TODO   SubroutineStmt SubroutineSubprogram

%%TODO - putback in above
  ContainsStmt
  ExternalStmt
  GenericSpec
  SubroutineSubprogram
  SubroutineRange
  SubroutineParList
  EndSubroutineStmt
  SubroutinePar
  FunctionStmt FunctionPar EndFunctionStmt FunctionParList FunctionSubprogram FunctionRange FunctionPrefix
  SubprogramInterfaceBody SubroutineInterfaceRange FunctionInterfaceRange InterfaceBody InterfaceBlock
  InterfaceStmt EndInterfaceStmt InterfaceBlockPart
  ProcedureName ProcedureNameList ModuleProcedureStmt
  ProcLanguageBindingSpec

context-free syntax

%%R1201 %% note: iso says interfacebody allways precedes moduleprocstmt.
  InterfaceStmt                     EndInterfaceStmt   -> InterfaceBlock
  InterfaceStmt InterfaceBlockPart+ EndInterfaceStmt   -> InterfaceBlock

  InterfaceBody                                        -> InterfaceBlockPart
  ModuleProcedureStmt                                  -> InterfaceBlockPart

%%R1203
%%TODO-F08 abstract
  LblDef 'INTERFACE' GenericName                   EOS -> InterfaceStmt       {cons("interface-stmt")}
  LblDef 'INTERFACE' GenericSpec                   EOS -> InterfaceStmt       {cons("interface-stmt")}
  LblDef 'INTERFACE'                               EOS -> InterfaceStmt       {cons("interface-stmt")}

%%R1204
%%TODO-F08 generic-spec replaces generic-name ENDINTERFACE
  LblDef 'END' 'INTERFACE' GenericName?            EOS -> EndInterfaceStmt    {cons("end-interface-stmt")}
  LblDef 'END' 'INTERFACE' GenericSpec?            EOS -> EndInterfaceStmt    {cons("end-interface-stmt")}

%%R1205
  LblDef FunctionPrefix FunctionName FunctionInterfaceRange     -> InterfaceBody
  LblDef 'SUBROUTINE' SubroutineName SubroutineInterfaceRange   -> InterfaceBody

  FunctionParList   EOS SubprogramInterfaceBody EndFunctionStmt    -> FunctionInterfaceRange
  FunctionParList   EOS EndFunctionStmt                            -> FunctionInterfaceRange

  SubroutineParList EOS SubprogramInterfaceBody EndSubroutineStmt  -> SubroutineInterfaceRange
  SubroutineParList EOS EndSubroutineStmt                          -> SubroutineInterfaceRange

  SpecificationPartConstruct                            -> SubprogramInterfaceBody
  SubprogramInterfaceBody SpecificationPartConstruct    -> SubprogramInterfaceBody

%%R1205
  LblDef 'MODULE' 'PROCEDURE' ProcedureNameList     EOS -> ModuleProcedureStmt  {cons("module-procedure-stmt")}
  {ProcedureName ","}+                                  -> ProcedureNameList
  Ident                                                 -> ProcedureName

%%R1207
  'OPERATOR'   '(' DefinedOperator ')'                   -> GenericSpec
  'ASSIGNMENT' '(' '='             ')'                   -> GenericSpec

%%R1208
%%TODO   LblDef 'intrinsic' {IntrinsicProcedureName ","}+ EOS  -> IntrinsicStmt

%%R1209
%%TODO-F08 import-stmt

%%R1210
  LblDef 'EXTERNAL' '::'? {ExternalName ","}+       EOS -> ExternalStmt         {cons("external-stmt")}

%%R1209
%%TODO   Name '(' FunctionArgList? ')'                         -> FunctionReference

%%R1210 
%%TODO   LblDef 'call' SubroutineNameUse EOS                           -> CallStmt
%%TODO   LblDef 'call' SubroutineNamUese '(' {ActualArg ","}* ')' EOS  -> CallStmt

%%R1213 
%%TODO   (Name '=')? Expr                      -> ActualArg
%%TODO   (Name '=')? '*' LblRef                -> ActualArg

%%R1211 [ keyword = ] actual-arg
%%TODO   FunctionArg                                   -> FunctionArgList
%%TODO   FunctionArgList ',' FunctionArg               -> FunctionArgList
%%TODO   SectionSubscriptList ',' FunctionArg          -> FunctionArgList

%%TODO   Name '=' Expr                                 -> FunctionArg

%%R1212 keyword is dummy-arg-name
%% see 1211

%%R1214 alt-return-spec is '*' label
%% see 1213

%%R1227
  LblDef FunctionPrefix FunctionName FunctionRange     -> FunctionSubprogram  {cons("function-subprogram")}
  FunctionStmt EndFunctionStmt                         -> FunctionSubprogram  {cons("function-subprogram")}
  FunctionParList EOS Body? EndFunctionStmt            -> FunctionRange

%%R1228
%%TODO-F08 - add prefix, dummy-arg-name-list, suffix
  LblDef 'FUNCTION' FunctionName '(' ')'           EOS -> FunctionStmt        {cons("function-stmt")}

%%R1215
  FunctionParList 'result' '(' Name ')' EOS InternalSubProgPart EndFunctionStmt         -> FunctionRange
  FunctionParList 'result' '(' Name ')' EOS Body EndFunctionStmt                        -> FunctionRange
  FunctionParList 'result' '(' Name ')' EOS EndFunctionStmt                             -> FunctionRange
  FunctionParList EOS InternalSubProgPart EndFunctionStmt                               -> FunctionRange

%%R1216
%%R1217
  'RECURSIVE' 'FUNCTION'                       -> FunctionPrefix
  'recursive' TypeSpec 'function'              -> FunctionPrefix
  TypeSpec 'recursive' 'function'              -> FunctionPrefix

%%R1229
  LanguageBindingSpec                          -> ProcLanguageBindingSpec

%%R1232
%% endfunction (without spaces) is allowed
  LblDef 'END'                              EOS -> EndFunctionStmt      {cons("end-function-stmt")}
  LblDef 'END' 'FUNCTION' FunctionName?     EOS -> EndFunctionStmt      {cons("end-function-stmt")}

%%R1233
%%TODO-F08 add prefix
  LblDef 'RECURSIVE'? 'SUBROUTINE' SubroutineName SubroutineRange        -> SubroutineSubprogram
  SubroutineParList? EOS Body? EndSubroutineStmt                         -> SubroutineRange
%%TODO   SubroutineParList  EOS InternalSubProgPart EndSubroutineStmt    -> SubroutineRange
%% split subroutineStmt/subroutineSubprogram needed? (ELI legacy)

%%1234
%%TODO   LblDef 'SUBROUTINE' Name SubroutineParList? EOS                 -> SubroutineStmt

%%R1230
%%TODO-F08 dummy-arg-name-list and move proc-language-binding-spec
   '(' {SubroutinePar ","}* ')' ProcLanguageBindingSpec?                 -> SubroutineParList

%%R1221
   DummyArgName         -> SubroutinePar
   '*'                  -> SubroutinePar

%%/* Must be split on semantic grounds, due to the different scopes for the
   LblDef FunctionPrefix Name FunctionParList? EOS      -> FunctionStmt
   TypeSpec? 'function'                                 -> FunctionPrefix

   '(' {FunctionPar ","}* ')'                           -> FunctionParList {cons("function-par-list")}
   DummyArgName                                         -> FunctionPar

%%R1236
  LblDef 'END' 'SUBROUTINE' SubroutineName? EOS -> EndSubroutineStmt   {cons("end-subroutine-stmt")}
  LblDef 'END'                              EOS -> EndSubroutineStmt   {cons("end-subroutine-stmt")}

%%R1223
%%TODO   LblDef 'entry' EntryName SubroutineParList EOS                        -> EntryStmt
%%TODO   LblDef 'entry' EntryName SubroutineParList 'result' '(' Name ')' EOS  -> EntryStmt

%%R1224
%%TODO   LblDef 'return' Expr? EOS              -> ReturnStmt

%%R1242
  LblDef 'CONTAINS'                         EOS -> ContainsStmt        {cons("contains-stmt")}

%%-R1226 
%% statement-functions are obsolete in fortran 95. 
%% The following rule causes ambiguity with assignment statements like
%% FOO(NOARG) = IN2-IN3
%% If you're ok with ambig rules then uncomment the next line.
%% LblDef  Name '(' SFDummyArgNameList? ')' '=' Expr EOS        -> StmtFunctionStmt

%%TODO   {SFDummyArgName ","}+                 -> SFDummyArgNameList
