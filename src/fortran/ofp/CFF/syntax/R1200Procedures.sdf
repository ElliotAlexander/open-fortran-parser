      
%%%%%%%%%%
%% Fortran ISO/IEC 1539:1991 section 12xx Procedures section
%%%%%%%%%%

%%module languages/fortran/syntax/R1200Procedures
module R1200Procedures

imports
  %% languages/fortran/syntax/FortranLex
  %% languages/fortran/syntax/Fortran90
  FortranLex
  Fortran

exports

sorts

%%TODO   ActualArg CallStmt ContainsStmt EndFunctionStmt EndInterfaceStmt
%%TODO   EndSubroutineStmt EntryStmt ExternalStmt FunctionArg FunctionArgList
%%TODO   FunctionInterfaceRange FunctionPar FunctionParList FunctionPrefix FunctionRange
%%TODO   FunctionReference FunctionStmt FunctionSubprogram GenericSpec InterfaceBlock
%%TODO   InterfaceBlockPart InterfaceBody InterfaceStmt IntrinsicStmt ModuleProcedureStmt
%%TODO   ProcedureName ProcedureNameList ReturnStmt SFDummyArgNameList 
  %% StmtFunctionStmt obsolescant/deleted
%%TODO   SubprogramInterfaceBody SubroutineInterfaceRange SubroutinePar SubroutineParList SubroutineRange
%%TODO   SubroutineStmt SubroutineSubprogram

%%TODO - putback in above
  ContainsStmt
  SubroutineSubprogram
  SubroutineRange
  SubroutineParList
  EndSubroutineStmt
  SubroutinePar

context-free syntax

%%R1201 %% note: iso says interfacebody allways precedes moduleprocstmt.
%%TODO   InterfaceStmt InterfaceBlockPart+ EndInterfaceStmt    -> InterfaceBlock

%%TODO   InterfaceBody                                 -> InterfaceBlockPart
%%TODO   ModuleProcedureStmt                           -> InterfaceBlockPart

%%R1202
%%TODO   LblDef 'interface' GenericName EOS            -> InterfaceStmt
%%TODO   LblDef 'interface' GenericSpec EOS            -> InterfaceStmt
%%TODO   LblDef 'interface' EOS                        -> InterfaceStmt

%%R1203
%%TODO   LblDef 'end' 'interface' EOS                  -> EndInterfaceStmt

%%R1204
%%TODO   LblDef FunctionPrefix FunctionName FunctionInterfaceRange     -> InterfaceBody
%%TODO   LblDef 'subroutine' SubroutineName SubroutineInterfaceRange   -> InterfaceBody

%%TODO   FunctionParList   EOS SubprogramInterfaceBody EndFunctionStmt         -> FunctionInterfaceRange
%%TODO   FunctionParList   EOS EndFunctionStmt                                 -> FunctionInterfaceRange

%%TODO   SubroutineParList EOS SubprogramInterfaceBody EndSubroutineStmt       -> SubroutineInterfaceRange
%%TODO   SubroutineParList EOS EndSubroutineStmt                               -> SubroutineInterfaceRange

%%TODO   SpecificationPartConstruct                            -> SubprogramInterfaceBody
%%TODO   SubprogramInterfaceBody SpecificationPartConstruct    -> SubprogramInterfaceBody

%%R1205
%%TODO   LblDef 'module' 'procedure' ProcedureNameList EOS     -> ModuleProcedureStmt
%%TODO   {ProcedureName ","}+                                  -> ProcedureNameList
%%TODO   Ident                                                 -> ProcedureName

%%R1206
%%TODO   'operator' '(' DefinedOperator ')'            -> GenericSpec
%%TODO   'assignment' '(' '=' ')'                      -> GenericSpec

%%R1207
%%TODO   LblDef 'external' {ExternalName ","}+ EOS     -> ExternalStmt

%%R1208
%%TODO   LblDef 'intrinsic' {IntrinsicProcedureName ","}+ EOS  -> IntrinsicStmt

%%R1209
%%TODO   Name '(' FunctionArgList? ')'                         -> FunctionReference

%%R1210 
%%TODO   LblDef 'call' SubroutineNameUse EOS                           -> CallStmt
%%TODO   LblDef 'call' SubroutineNameUse '(' {ActualArg ","}* ')' EOS  -> CallStmt

%%R1213 
%%TODO   (Name '=')? Expr                      -> ActualArg
%%TODO   (Name '=')? '*' LblRef                -> ActualArg

%%R1211 [ keyword = ] actual-arg
%%TODO   FunctionArg                                   -> FunctionArgList
%%TODO   FunctionArgList ',' FunctionArg               -> FunctionArgList
%%TODO   SectionSubscriptList ',' FunctionArg          -> FunctionArgList

%%TODO   Name '=' Expr                                 -> FunctionArg

%%R1212 keyword is dummy-arg-name
%% see 1211

%%R1214 alt-return-spec is '*' label
%% see 1213

%%R1215
%%TODO   LblDef FunctionPrefix FunctionName FunctionRange      -> FunctionSubprogram
%%TODO   FunctionParList EOS Body? EndFunctionStmt             -> FunctionRange

%%R1215
%%TODO   FunctionParList 'result' '(' Name ')' EOS InternalSubProgPart EndFunctionStmt         -> FunctionRange
%%TODO   FunctionParList 'result' '(' Name ')' EOS Body EndFunctionStmt                        -> FunctionRange
%%TODO   FunctionParList 'result' '(' Name ')' EOS EndFunctionStmt                             -> FunctionRange
%%TODO   FunctionParList EOS InternalSubProgPart EndFunctionStmt                               -> FunctionRange

%%R1216
%%R1217
%%TODO   'recursive' 'function'                -> FunctionPrefix
%%TODO   'recursive' TypeSpec 'function'       -> FunctionPrefix
%%TODO   TypeSpec 'recursive' 'function'       -> FunctionPrefix

%%R1218
%% endfunction (without spaces) is allowed
%%TODO   LblDef 'end' EOS                              -> EndFunctionStmt
%%TODO   LblDef 'end' 'function' EndName? EOS          -> EndFunctionStmt

%%R1219
%%R1220
  LblDef 'RECURSIVE'? 'SUBROUTINE' SubroutineName SubroutineRange       -> SubroutineSubprogram
  SubroutineParList? EOS Body? EndSubroutineStmt                        -> SubroutineRange
  SubroutineParList  EOS InternalSubProgPart EndSubroutineStmt          -> SubroutineRange
%% split subroutineStmt/subroutineSubprogram needed? (ELI legacy)
%%TODO   LblDef 'SUBROUTINE' Name SubroutineParList? EOS                       -> SubroutineStmt
   '(' {SubroutinePar ","}* ')'                                         -> SubroutineParList

%%R1221
   DummyArgName         -> SubroutinePar
   '*'                  -> SubroutinePar

%%/* Must be split on semantic grounds, due to the different scopes for the
%%TODO    LblDef FunctionPrefix Name FunctionParList? EOS      -> FunctionStmt
%%TODO    TypeSpec? 'function'                                 -> FunctionPrefix

%%TODO    '(' {FunctionPar ","}* ')'                           -> FunctionParList
%%TODO    DummyArgName                                         -> FunctionPar

%%R1222
  LblDef 'END' 'SUBROUTINE' EndName? EOS        -> EndSubroutineStmt
  LblDef 'END' EOS                              -> EndSubroutineStmt

%%R1223
%%TODO   LblDef 'entry' EntryName SubroutineParList EOS                        -> EntryStmt
%%TODO   LblDef 'entry' EntryName SubroutineParList 'result' '(' Name ')' EOS  -> EntryStmt

%%R1224
%%TODO   LblDef 'return' Expr? EOS             -> ReturnStmt

%%R1225
  LblDef 'CONTAINS' EOS                        -> ContainsStmt

%%-R1226 
%% statement-functions are obsolete in fortran 95. 
%% The following rule causes ambiguity with assignment statements like
%% FOO(NOARG) = IN2-IN3
%% If you're ok with ambig rules then uncomment the next line.
%% LblDef  Name '(' SFDummyArgNameList? ')' '=' Expr EOS        -> StmtFunctionStmt

%%TODO   {SFDummyArgName ","}+                 -> SFDummyArgNameList
